local icons = require("config.icons")
return {
	mode = { "n", "v" },
	w = { ":w!<CR>", "Save" },
	q = { ":confirm q<CR>", "Quit" },
	h = { ":nohlsearch<CR>", "No Highlight" },
	p = { require("telescope.builtin").lsp_document_symbols, "Document Symbols" },
	P = { require("telescope.builtin").lsp_dynamic_workspace_symbols, "Workspace Symbols" },
	o = { require("telescope.builtin").buffers, "Open Buffer" },
	W = { "<cmd>noautocmd w<cr>", "Save without formatting (noautocmd)" },
	g = {
		name = icons.dev.Gopher .. " Golang",
		f = { "<cmd>Telescope find_files<cr>", icons.dev.Fzy .. " Fuzzy files (cwd)" },
    i = { "<cmd>GoImport<cr>", icons.dev.Import .. " Go Import" },
    b = { "<cmd>GoBuild %:h<cr>", icons.dev.Build .. " Go Build" },
    t = { "<cmd>GoTestPkg<cr>", icons.dev.TestTube .. " Go Test Pkg" },
    T = { "<cmd>GoCoverage -p<cr>", icons.dev.TestTube .. " Go Coverage" },
    l = { "<cmd>GoLint<cr>", icons.dev.Lint .. " Go Lint" },
    a = { "<cmd>GoAddTag<cr>", icons.dev.Tag .. " Add Tags" },
    r = { "<cmd>GoARmTag<cr>", icons.dev.Tag .. " Remove Tags" },
    A = { "<cmd>lua require('go.alternative').switch(true, '')<cr>", icons.dev.Split .. " Go Split" },
    S = { "<cmd>lua require('go.alternative').switch(true, 'split')<cr>", icons.dev.Split .. " Go Split (H) " },
    V = { "<cmd>lua require('go.alternative').switch(true, 'vsplit')<cr>", icons.dev.Split .. " Go Split (V)" },
    c = { "<cmd>lua require('go.comment').gen()<cr>", icons.dev.Doc .. " Go Comment" },
    k = { "<cmd>lua require('lsp_signature').toggle_float_win<cr>", icons.dev.Signature .. " Toggle Signature (win)" },
    K = { "<cmd>lua require('lsp_signature').toggle_float_win<cr>", icons.dev.Signature .. " Toggle Signature" },
	},
	f = {
		name = icons.ui.Telescope .. " Fuzzy",
		z = { "<cmd>Telescope find_files<cr>", "Find File (Golang)" },
		f = { "<cmd>Telescope find_files<cr>", "Find File (CWD)" },
		F = { "<cmd>Telescope current_buffer_fuzzy_find<cr>", "Find Currently" },
		h = { "<cmd>Telescope help_tags<cr>", "Find Help" },
		H = { "<cmd>Telescope highlights<cr>", "Find highlight groups" },
		M = { "<cmd>Telescope man_pages<cr>", "Man Pages" },
		o = { "<cmd>Telescope oldfiles<cr>", "Open Recent File" },
		R = { "<cmd>Telescope registers<cr>", "Registers" },
		t = { "<cmd>Telescope live_grep<cr>", "Live Grep" },
		T = { "<cmd>Telescope grep_string<cr>", "Grep String" },
		k = { "<cmd>Telescope keymaps<cr>", "Keymaps" },
		C = { "<cmd>Telescope commands<cr>", "Commands" },
		l = { "<cmd>Telescope resume<cr>", "Resume last search" },
		c = { "<cmd>Telescope git_commits<cr>", "Git commits" },
		B = { "<cmd>Telescope git_branches<cr>", "Git branches" },
		g = { "<cmd>Telescope git_status<cr>", "Git status" },
		S = { "<cmd>Telescope git_stash<cr>", "Git stash" },
		e = { "<cmd>Telescope frecency<cr>", "Frecency" },
		b = { "<cmd>Telescope buffers<cr>", "Buffers" },
		d = {
			name = icons.diagnostics.LadyBug .. " DAP",
			c = { "<cmd>Telescope dap commands<cr>", "Dap Commands" },
			b = { "<cmd>Telescope dap list_breakpoints<cr>", "Dap Breakpoints" },
			g = { "<cmd>Telescope dap configurations<cr>", "Dap Configurations" },
			v = { "<cmd>Telescope dap variables<cr>", "Dap Variables" },
			f = { "<cmd>Telescope dap frames<cr>", "Dap Frames" },
		},
		N = {
			function()
				require("telescope.builtin").find_files({ cwd = vim.fn.stdpath("config") })
			end,
			"Search Neovim Config",
		},
	},
	l = {
		name = icons.ui.Gear .. " LSP",
		a = { vim.lsp.buf.code_action, "Code Action" },
		A = { vim.lsp.buf.range_code_action, "Range Code Actions" },
		s = { vim.lsp.buf.signature_help, "Display Signature Information" },
		r = { vim.lsp.buf.rename, "Rename all references" },
		f = { vim.lsp.buf.format, "Format" },
		i = { require("telescope.builtin").lsp_implementations, "Implementation" },
		-- h = { vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled()), "Inlay Hints" },
		-- l = { "<cmd>TroubleToggle document_diagnostics<cr>", "Document Diagnostics (Trouble)" },
		-- L = { "<cmd>TroubleToggle workspace_diagnostics<cr>", "Workspace Diagnostics (Trouble)" },
		w = { require("telescope.builtin").diagnostics, "Diagnostics" },
		t = { require("telescope").extensions.refactoring.refactors, "Refactor" },
		-- c = { require("config.utils").copyFilePathAndLineNumber, "Copy File Path and Line Number" },
	},
	G = {
    t = {
      name = icons.git.Octoface .. " Tiny Git",
      c = { "<cmd>lua require 'tinygit'.smartCommit{ pushIfClean = true }<cr>", icons.git.Commit.. " Smart-Commit & Push" },
      C = { "<cmd>lua require 'tinygit'.smartCommit{ pushIfClean = false }<cr>", icons.git.Commit .. " Smart-Commit" },
      a = { "<cmd>lua require 'tinygit'.amendNoEdit{ forcePushIfDiverged = true }<cr>", icons.git.CommitAmend .. " Amend-no-edit & F-Push" },
      A = { "<cmd>lua require 'tinygit'.amendOnlyMsg{ forcePushIfDiverged = true }<cr>", icons.git.CommitAmend .. " Amend Msg & F-Push" },
      b = { "<cmd>lua require 'tinygit'.blame()<cr>", icons.git.Blame .. " Blame" },
      u = { "<cmd>lua require 'tinygit'.undoLastCommitOrAmend()<cr>", icons.git.CommitUndo .. " Undo Last Commit/Amend" },
      p = { "<cmd>lua require 'tinygit'.push{ forceWithLease = true }<cr>", icons.git.Push .. " Push" },
      P = { "<cmd>lua require 'tinygit'.push{ pullBefore = true }<cr>", icons.git.Pull .. " Pull & Push" },
      f = { "<cmd>lua require 'tinygit'.fixupCommit{ autoRebase = true }<cr>", icons.git.Push .. " Fixup & Rebase" },
      F = { "<cmd>Fugit2<cr>", icons.git.GitFolder .. " Fugit2" },
      h = { "<cmd>lua require 'tinygit'.searchFileHistory()<cr>", icons.git.History .. " File History" },
      H = { "<cmd>lua require 'tinygit'.functionHistory()<cr>", icons.git.History .. " Function History" },
      i = { "<cmd>lua require 'tinygit'.lineHistory()<cr>", icons.git.History .. " Line History" },
      o = { "<cmd>lua require 'tinygit'.githubUrl()<cr>", icons.git.GitHub.. " Open on GitHub" },
      O = { "<cmd>lua require 'tinygit'.githubUrl('repo')<cr>", icons.git.GitHub.. " Open Repo on GitHub" },
      I = { "<cmd>lua require 'tinygit'.openIssueUnderCursor()<cr>", icons.git.GitHub.. " Open Issue under Cursor" },
    },
		k = { "<cmd>lua require 'gitsigns'.prev_hunk({navigation_message = false})<cr>", "Prev Hunk" },
		l = { "<cmd>lua require 'gitsigns'.blame_line()<cr>", "Blame" },
		p = { "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", "Preview Hunk" },
		r = { "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", "Reset Hunk" },
		R = { "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", "Reset Buffer" },
		S = { "<cmd>lua require 'gitsigns'.stage_buffer()<cr>", "Stage Buffer" },
		j = { "<cmd>lua require 'gitsigns'.next_hunk({navigation_message = false})<cr>", "Next Hunk" },
		s = { "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", "Stage Hunk" },
		u = {
			"<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",
			"Undo Stage Hunk",
		},
		o = { require("telescope.builtin").git_status, "Open changed file" },
		b = { require("telescope.builtin").git_branches, "Checkout branch" },
		c = { require("telescope.builtin").git_commits, "Checkout commit" },
		C = {
			require("telescope.builtin").git_bcommits,
			"Checkout commit(for current file)",
		},
		d = {
			"<cmd>Gitsigns diffthis HEAD<cr>",
			"Git Diff",
		},
		U = { ":UndotreeToggle<CR>", "Toggle UndoTree" },
	},
	d = {
		name = icons.diagnostics.Bug .. " Debug",
		b = { require("dap").toggle_breakpoint, "Breakpoint" },
		c = { require("dap").continue, "Continue" },
		i = { require("dap").step_into, "Into" },
		o = { require("dap").step_over, "Over" },
		O = { require("dap").step_out, "Out" },
		r = { require("dap").repl.toggle, "Repl" },
		l = { require("dap").run_last, "Last" },
		u = { require("dapui").toggle, "UI" },
		x = { require("dap").terminate, "Exit" },
	},
}
